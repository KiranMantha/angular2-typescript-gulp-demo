{"version":3,"sources":["Components/ModalDialog/dialog.component.ts"],"names":[],"mappings":"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","file":"Components/ModalDialog/dialog.component.js","sourcesContent":["import {Component, DynamicComponentLoader, ElementRef, ComponentRef, ApplicationRef, Injector, AfterViewInit} from '@angular/core';\r\nimport { HTTP_PROVIDERS, Http, Response } from '@angular/http';\r\nimport { Observable }     from 'rxjs/Observable';\r\nimport * as _ from 'lodash';\r\n\r\n@Component({\r\n    selector: '[ng-dialog]',\r\n    providers: [HTTP_PROVIDERS],\r\n    templateUrl: 'Components/ModalDialog/dialog.tpl.html'\r\n})\r\n\r\nexport class ModalDialog {\r\n    private _elementRef: ElementRef;\r\n    private _content: string;\r\n    private _classArray: Array<string> = [];\r\n    private _componentRef: ComponentRef;\r\n\r\n    public closeByDocument: boolean;\r\n    public template: string = '';\r\n    public templateUrl: string = '';\r\n    public classNameArray: Array<string> = [];\r\n    public component: Component;\r\n    public callBackComponent: Component;\r\n    public callbackOnClose: any;\r\n\r\n    constructor(private _ElementRef: ElementRef,\r\n        private _http: Http,\r\n        private dcl: DynamicComponentLoader,\r\n        private injector: Injector,\r\n        private appRef: ApplicationRef\r\n    ) {\r\n        this._elementRef = _ElementRef;\r\n    }\r\n\r\n    public openDialog(): void {\r\n        $(this._elementRef.nativeElement).parents('body').toggleClass('ng-dialog-open');\r\n        if (this.templateUrl !== '') {\r\n            this._loadTemplate(this.templateUrl).subscribe(content => {\r\n                $(this._elementRef.nativeElement).find('.ng-dialog-content')[0].innerHTML = content;\r\n            });\r\n        } else if (this.component) {\r\n            this._loadComponent(this.component);\r\n        } else {\r\n            this._content = this.template;\r\n        }\r\n        if (this.classNameArray.length > 0) {\r\n            this._classArray = _.uniq(_.concat('ng-dialog', this.classNameArray));\r\n        } else {\r\n            this._classArray = ['ng-dialog'];\r\n        }\r\n    }\r\n\r\n    public closeDialog(evt: Event): void {\r\n        if (this.closeByDocument) {\r\n            if (evt.target.classList.contains('ng-dialog') || evt.target.classList.contains('ng-dialog-close')) {\r\n                this._close();\r\n            }\r\n        }\r\n        else {\r\n            if (evt.target.classList.contains('ng-dialog-close')) {\r\n                this._close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _close(): void {\r\n        $(this._elementRef.nativeElement).parents('body').toggleClass('ng-dialog-open');\r\n        //this.childComponentRef.destroy();\r\n        //this.appRef.tick();\r\n        this.componentRef.destroy();\r\n        if (_.isFunction(this.callBackComponent[this.callbackOnClose])) {\r\n            this.callBackComponent[this.callbackOnClose]();\r\n        }\r\n    }\r\n\r\n    private _loadComponent(component: Component): void {\r\n        this.dcl.loadAsRoot(this.component, '.ng-dialog-content', this.injector).then(componentref => {\r\n            this.appRef._loadComponent(componentref);\r\n            this.childComponentRef = componentref;\r\n        });\r\n    }\r\n\r\n\r\n    private _loadTemplate(tmpl: string): Observable<string> {\r\n        return this._http.get(tmpl)\r\n            .map(this._extractData)\r\n    }\r\n\r\n    private _extractData(res: Response): string {\r\n        let body = res;\r\n        return body.text() || '';\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}